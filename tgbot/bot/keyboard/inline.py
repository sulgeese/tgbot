from typing import List, Tuple

from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton

from db.models import EventsModel, UsersModel
from .utils import get_users_for_keyboard


confirm = InlineKeyboardMarkup(
    inline_keyboard=[
        [
            InlineKeyboardButton(
                text='–î–∞',
                callback_data="confirm"
            ),
            InlineKeyboardButton(
                text='–ù–µ—Ç',
                callback_data="cancel"
            )
        ]
    ]
)

event_interactions = InlineKeyboardMarkup(
    inline_keyboard=[
        [
            InlineKeyboardButton(
                text="üìÜ –°–æ–∑–¥–∞—Ç—å",
                callback_data="create_events"
            ),
            InlineKeyboardButton(
                text="‚úèÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å",
                callback_data="edit_events"
            ),
        ],
        [
            InlineKeyboardButton(
                text="üóëÔ∏è –£–¥–∞–ª–∏—Ç—å",
                callback_data="delete_events"
            ),
            InlineKeyboardButton(
                text="üîç –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å",
                callback_data="search_events"
            ),
        ]
    ]
)

edit_events = InlineKeyboardMarkup(
    inline_keyboard=[
        [
            InlineKeyboardButton(
                text="üìÜ –î–∞—Ç—É",
                callback_data="edit_date"
            ),
            InlineKeyboardButton(
                text="üìù –ù–∞–∑–≤–∞–Ω–∏–µ",
                callback_data="edit_title"
            ),
        ],
        [
            InlineKeyboardButton(
                text="üìù –¢–µ–∫—Å—Ç",
                callback_data="edit_text"
            ),
            InlineKeyboardButton(
                text="üë• –£–ø–æ–º–∏–Ω–∞–Ω–∏—è",
                callback_data="edit_mentions"
            ),
        ],
[
            InlineKeyboardButton(
                text="‚úÖ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å",
                callback_data="confirm"
            ),
            InlineKeyboardButton(
                text="‚ùå –û—Ç–º–µ–Ω–∞",
                callback_data="cancel"
            ),
        ]
    ]
)

event_back = InlineKeyboardMarkup(
    inline_keyboard=[
        [
            InlineKeyboardButton(
                text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥",
                callback_data="event_search_back",
            )
        ]
    ]
)


def get_users_keyboard(users: List[UsersModel], ignore_username_list: List[str] = ()) -> InlineKeyboardMarkup:
    user_list = get_users_for_keyboard(users)
    if len(user_list) != len(ignore_username_list):
        user_list.append(("üë• –í—Å–µ—Ö", "all"))
    keyboard_rows, current_row = [], []
    keyboard_width = 3
    for name, username in map(lambda x: (x[0], f"@{x[1]}"), user_list):
        if ignore_username_list and username in ignore_username_list:
            continue
        current_row.append(InlineKeyboardButton(text=name, callback_data=username))
        if len(current_row) == keyboard_width:
            keyboard_rows.append(current_row)
            current_row = []
    if current_row:
        keyboard_rows.append(current_row)
    keyboard_rows.append([
        InlineKeyboardButton(text="‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å", callback_data=f"confirm_mentions"),
        InlineKeyboardButton(text="üîÑ –°–±—Ä–æ—Å–∏—Ç—å", callback_data=f"cancel_mentions")]
    )
    return InlineKeyboardMarkup(inline_keyboard=keyboard_rows)


def get_events_keyboard(events: List[EventsModel]) -> InlineKeyboardMarkup:
    keyboard_rows, current_row = [], []
    keyboard_width = 3
    if events:
        for event in events:
            current_row.append(InlineKeyboardButton(
                text=event.title,
                callback_data=f"${event.id}"
            ))
            if len(current_row) == keyboard_width:
                keyboard_rows.append(current_row)
                current_row = []
        if current_row:
            keyboard_rows.append(current_row)
    keyboard_rows.append([InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back")])
    return InlineKeyboardMarkup(inline_keyboard=keyboard_rows)
